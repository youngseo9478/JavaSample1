하드디스크까지 가서 바이트 하나를 읽어오기를 계속 반복하는 작업!=>매우번거롭
사이즈가 작을때는 
FileInputStream/ FileOutputStream사용해도 
속도 차이를 잘 느끼지 못하지만 용량이 굉장히 커지면 바이트씩 읽어오는데
속도가 느려져 성능 저하가 나타난다. 게다가 바이트 단위로 읽으면 
한글같은 경우는 깨지는 현상이 발생한다. =>Reader/Writer를 사용(char단위로 읽음)

이럴때 스트링버퍼를 이용하면 모아서 읽고 가져오기때문에 속도가 굉장히 빨라진다.

버퍼는 템포러리한 기억공간
하드디스크에서 데이터를 모아서 읽어오고 쓰기 때문에 속도가빠른것
#자원반납이 제대로 되지 않으면 문제 발생
버퍼는 크기만큼 데이터가 차야지만 뿌리는게 가능. 남은 공간이 있으면 문제 생길 확률 높아짐

	예) 3919KB의 음악파일을 복사하려는데 버퍼 사이즈를 1MB정도로 했다.(4회수행)
		근데 문제는 버퍼의 남은 공간 마저도 카피본에 넣어버려서 원본과 데이터가 달라져버렸다.(더 커진다)
		이럴때는 write에 offset과 length옵션을 넣어줘서 컨트롤 가능하다(버퍼잡기)

	byte[] buffer = new byte[1024*1024]; //1MB
			while ((read = fis.read(buffer)) != -1) { //read : 읽은 바이트 수
				fos.write(buffer,0,read); 
				//횟수가 4번인거로 모아 마지막에 빈 공간까지 복사한것! =>버퍼를 잡아줘야한다.
				//그래서 길이를 read만큼으로 정해줘야 버퍼의 남은 공간을 복사하는 문제가 발생하지 않는다.
				count++;
			}
			
사이즈 정해주는 거랑 한글깨지는 거 등등...좀 복잡해서 자바한테 맡김
	##__BufferedInputStream
	##__BufferedOutputStream
	
			bis = new BufferedInputStream(fis);
			bos = new BufferedOutputStream(fos);
	
			//buffered(보조스트림)을 쓴 I/O => read 횟수는 같지만, write횟수가 엄청 줄어듬(성능개선성공)
			while ((read = bis.read()) != -1) { //read : 읽은 바이트 수
				bos.write((char)read); 
				//횟수가 4번인거로 모아 마지막에 빈 공간까지 복사한것! =>버퍼를 잡아줘야한다.
				//그래서 길이를 read만큼으로 정해줘야 버퍼의 남은 공간을 복사하는 문제가 발생하지 않는다.
				count++;
			}
 
 			근데..문제발생! 사이즈가 다름! (더 작음)
 			쓸 때 버퍼가 꽉차면 쓰기 기능을 수행하는데...
 			버퍼 비우는 작업이 이루어 지지 않으면 데이터 손실이 발생!
 			마지막 write후에 버퍼에는 데이터가 조금 더 찰 수 있음 근데 버퍼가 꽉차질 않았으니 비워지질 않음=>기록을 안함!
 			즉 쓰기 기능을 일부 누락하게 됨! 그래서 다 한 다음에는 flush()를 써줘야 한다.
 	
 			bos.flush();
 		
 			버퍼크기가 원본크기보다도 클 경우 비워주지않으면 copy에 아무것도 써지지 않음 **
 			그러므로 버퍼를 썻으면 무조건 버퍼리더를 flush해서 비워줘야한다.
 	