데이터를 모아서 관리하기 위한 용도로 클래스를 만드는 것
클래스는 데이터 + 기능이다.
기능에 필수로 존재하는 것은 생성자 메소드로 역시 오버로딩이 가능하다
클래스라는 틀을 이용해 만든 객체는 heap영역에 올라간다.
클래스 안에 static변수나 메소드를 만들 수 있는데 이것들은 static영역으로 new를 쓰지 않아도 
객체를 선언하는 것만으로도 메모리 영역에 올라가진다.
그러나 static메소드에서는 heap영역의 주소를 알 수 없고 오직 static변수만을 사용할 수 있다.
반대로 instance메소드에서는 static변수와 instance변수를 모두 사용할 수있다


클래스는 데이터를 모으는 경우도있고 기능의 역할이 강한 경우도 있다.
어울리는 것끼리 모아서 관리할 수 있는 클래스를 만들어야한다.


Employee emp = null;
이렇게하면 compile 타임에는 에러가 발생하지 않지만
null은 아직 주소가 배정되지 않았다는 의미이므로
nullPointerException을 발생시킨다.

메모리에 띄워야 Object가 된다. "Object==Instance==주소"
new는 객체를 생성해서 메모리를 갖게 해주는 것
new안해도 사용할 수 있는 자원은 static 자원, 아니면 instance 자원

static 영억의 메소드는 heap에 있는 영역을 사용할 수 없다.
즉, static 자원은 instance를 건드릴 수 없다.

main메소드도 static이다. 그러므로 이 메소드 안에서는 this, super 못쓴다.
this, super는 heap영역안에서만 사용할 수 있다. 